if command -v R > /dev/null 2>&1; then
    alias R="R --no-save"
    alias r="R --no-save"
fi

if command -v nvim > /dev/null 2>&1; then
    alias vim=nvim
    alias vimdiff="nvim -d"
    alias view="nvim -R"
    alias ex="nvim -e"
    alias exim="nvim -E"
    alias rvim="nvim -Z"
    alias rview="nvim -RZ"
fi

# bash/zsh-ism, but that's OK
# shellcheck disable=SC2039
case "$OSTYPE" in
    *darwin*)
        alias top="top -o cpu"
        alias ls='ls -Gp'
        ;;
    *linux*)
        alias ls='ls --color'
        ;;
esac

smallpdf () {
    if [ -z "$1" ]; then
        echo "Usage: smallpdf <filename>"
    else
        if [ -f "$1" ]; then
            gs -o "${1}.small.pdf" -sDEVICE=pdfwrite -dCompatibilityLevel=1.5 -f "${1}"
        else
            echo "$1 - file does not exist"
        fi
    fi
}

svg2pdf() {
    if [ -z "$1" ]; then
        echo "Usage: svg2pdf <filename>"
    else
        if [ -f "$1" ]; then
            oname=$(basename "$1" .svg)
            rsvg-convert "$PWD/$1" -f pdf -o "$PWD/${oname}.pdf"
        else
            echo "$1 - file does not exist"
        fi
    fi
}

pdf2svg() {
    if [ -z "$1" ]; then
        echo "Usage: pdf2svg <filename>"
    else
        if [ -f "$1" ]; then
            oname=$(basename "$1" .pdf)
            inkscape "$PWD/$1" "-l=$PWD/${oname}.svg" --without-gui
        else
            echo "$1 - file does not exist"
        fi
    fi
}

# Convert a video to Quicktime-compatible format
convert2quicktime() {
    input="$1"
    if [ -z "$input" ]; then
        echo "Converts a video to QuickTime-compatible format."
        echo "Usage: convert2quicktime <file> <ffmpeg_options>"
        return
    fi

    shift

    if ! [ -f "$input" ]; then
        echo "$input - file does not exist"
        return
    fi

    echo "$output"
    ffmpeg -i "$input" -map 0 -c:v libx265 -crf 22 -tag:v hvc1  -c:a aac -ac 2 -b:a 128k -c:s mov_text $@ "${input}.mp4"
}

# Convert a DOI to bibtex.
bib() {
    for i do
        curl -LH "Accept: text/bibliography; style=bibtex" "http://doi.org/$i" | sed 's/^ *//'
    done
}

# Convert a DOI to text
doi() {
    for i do
        curl -LH "Accept: text/bibliography" "http://doi.org/$i" | sed 's/^ *//'
    done
}

git-commit-each() {
    if [ -z "$1" ]; then
        echo "Usage: git-commit-each <message> [<body>]"
        return
    fi

    if ! [ -e .git ]; then
        echo "Run this in a git directory!"
        return
    fi

    for FILENAME in $(git ls-files --modified --others)
    do
        MESSAGE="$(echo "$FILENAME" | sed -e 's|^Library/Homebrew/||' \
            -e 's|^Formula/||' \
            -e 's|^Casks/||' \
            -e 's/\.rb//' \
            -e 's/$/: /')"
        git add "$FILENAME"
        git commit "$FILENAME" --message="${MESSAGE}${1}" --message="${2}"
    done
}

# Tea related things
__tea_splitter() {
  if test "$2" = "-L"; then
    SCRIPT_NAME=$1
    shift
    shift
    docker run \
      --name tea-test-runner \
      --rm \
      --volume "$HOME/tea:/src" \
      --volume "$HOME/tea/docker/tea:/opt" \
      --volume "$HOME/tea/docker/home:/root" \
      --volume "$HOME/tea/pantry.core:/opt/tea.xyz/var/pantry" \
      --workdir /src \
      --env TEA_PREFIX=/opt \
      --env GITHUB_TOKEN="$(gh auth token)" \
      --env TEA_PANTRY_PATH=/src/pantry.core:/src/pantry.extra \
      ghcr.io/teaxyz/infuser:latest \
      "/src/pantry.core/scripts/$SCRIPT_NAME" "$@"
  else
    TEA_PANTRY_PATH=$HOME/tea/pantry.core:$HOME/tea/pantry.extra \
    GITHUB_TOKEN=$(gh auth token) \
      "$HOME"/tea/pantry.core/scripts/"$@"
  fi
}

alias teab="__tea_splitter build.ts"
alias teat="__tea_splitter test.ts"
alias teal="~/.tea/deno.land/v1/bin/deno run --import-map=$HOME/tea/cli/import-map.json --unstable --allow-all ~/tea/cli/src/app.ts"

# vim: ft=sh
